from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ParseMode
from config import BOT_TOKEN
from weather import get_weather
import json

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(token=BOT_TOKEN)

# –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä ‚Äî –æ–Ω —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
dp = Dispatcher(bot)

# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ.
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ state storage.
user_city = {}
user_city_history = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")


#####################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)
#####################
@dp.message_handler()
async def get_weather_info(message: types.Message):
    city = message.text.strip()
    user_city[message.from_user.id] = city

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    if message.from_user.id not in user_city_history:
        user_city_history[message.from_user.id] = []
    user_city_history[message.from_user.id].append(city)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    await send_forecast_keyboard(message=message, user_id=message.from_user.id)


#####################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞)
#####################
@dp.callback_query_handler(lambda call: call.data and call.data.startswith("forecast:"))
async def process_forecast_callback(call: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä "forecast:3" ‚Üí —á–∏—Å–ª–æ 3
    _, days_str = call.data.split(":")
    days = int(days_str)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    city = user_city.get(call.from_user.id)
    if not city:
        await bot.answer_callback_query(call.id, text="–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ get_forecast()
    forecast_data = get_weather(city, days)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
    if forecast_data.get("error"):
        error_message = forecast_data["error"].get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await bot.send_message(call.from_user.id, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {error_message}")
        await bot.answer_callback_query(call.id)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    forecast_days = forecast_data.get("forecast", {}).get("forecastday", [])
    text_message = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city} –Ω–∞ {days} –¥–Ω. :</b>\n\n"
    for day in forecast_days:
        date = day.get("date")
        day_info = day.get("day", {})
        avg_temp = day_info.get("avgtemp_c")
        condition = day_info.get("condition", {}).get("text")
        emoji = get_condition_emoji(condition)
        text_message += f"{emoji} <b>{date}</b>:\n{condition}, —Å—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {avg_temp}¬∞C\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(call.from_user.id, text_message, parse_mode=ParseMode.HTML)
    await bot.answer_callback_query(call.id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ
    if len(user_city_history.get(call.from_user.id, [])) > 0:
        last_city = user_city_history[call.from_user.id][-1]  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ—Ä–æ–¥
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥: {last_city}", callback_data="previous_city"),
            InlineKeyboardButton("–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥", callback_data="new_city")
        )
        await bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    else:
        await bot.send_message(call.from_user.id, "–ß—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")


#####################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
#####################
@dp.callback_query_handler(lambda call: call.data == "previous_city")
async def choose_previous_city(call: CallbackQuery):
    user_id = call.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    last_city = user_city_history.get(user_id, [])[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
    if last_city:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        user_city[user_id] = last_city

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        await send_forecast_keyboard(message=call.message, user_id=user_id)
    else:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ—Ä–æ–¥–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥.")
        await bot.answer_callback_query(call.id)


@dp.callback_query_handler(lambda call: call.data == "new_city")
async def enter_new_city(call: CallbackQuery):
    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    await bot.answer_callback_query(call.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
async def send_forecast_keyboard(*,message, user_id) -> None:
    city = user_city.get(user_id)
    if not city:
        return await message.reply("–ì–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="forecast:1"),
        InlineKeyboardButton("3 –¥–Ω—è", callback_data="forecast:3"),
        InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="forecast:7")
    )
    await message.reply(f"–ì–æ—Ä–æ–¥ {city} –≤—ã–±—Ä–∞–Ω.\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)


def get_condition_emoji(condition_text: str) -> str:
    condition_text = condition_text.lower()
    if "—Å–æ–ª–Ω–µ—á–Ω–æ" in condition_text:
        return "‚òÄÔ∏è"
    elif "–ø–∞—Å–º—É—Ä–Ω–æ" in condition_text:
        return "‚òÅÔ∏è"
    elif "–¥–æ–∂–¥—å" in condition_text:
        return "üåßÔ∏è"
    elif "–æ–±–ª–∞—á–Ω–æ" in condition_text:
        return "‚õÖ"
    else:
        return "üåà"


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
